{"ast":null,"code":"import { WEB3_REQUEST, WEB3_SUCCESS, WEB3_FAIL, RIGELPOOL_REQUEST, RIGELPOOL_SUCCESS, RIGELPOOL_FAIL, WALLET_CONNECT_REQUEST, WALLET_CONNECT_SUCCESS, WALLET_DISCONNECT_SUCCESS } from \"../constants\";\nimport { getReadOnlyProvider, isEmpty, getRigelPoolContract, message } from \"../utils\";\nimport RigelPoolObject from \"../contracts/RigelPool.json\"; //set up web3\n\nexport const setUpWeb3 = function () {\n  let obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async dispatch => {\n    try {\n      dispatch({\n        type: WEB3_REQUEST\n      });\n      const web3 = await getReadOnlyProvider();\n\n      if (isEmpty(web3)) {\n        throw new Error(\"Please install metamask\");\n      }\n\n      dispatch({\n        type: WEB3_SUCCESS,\n        payload: web3\n      });\n    } catch (error) {\n      message('error', error.message);\n      dispatch({\n        type: WEB3_FAIL\n      });\n    }\n  };\n}; //set up rigelPool instance\n\nexport const setUpRigelPool = function () {\n  let obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: RIGELPOOL_REQUEST\n      });\n      const exchange = await getRigelPoolContract(getState().web3.instance, RigelPoolObject);\n      dispatch({\n        type: RIGELPOOL_SUCCESS,\n        payload: exchange\n      });\n    } catch (error) {\n      message('error', error.message);\n      dispatch({\n        type: RIGELPOOL_FAIL\n      });\n    }\n  };\n}; //User Actions\n\nexport const setUpUser = _ref => {\n  let {\n    provider,\n    address,\n    status\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: WALLET_CONNECT_REQUEST\n    });\n\n    if (status === 'connect') {\n      localStorage.setItem('user', JSON.stringify({\n        address\n      }));\n      dispatch({\n        type: WALLET_CONNECT_SUCCESS,\n        payload: {\n          address,\n          provider\n        }\n      });\n    } else if (status === 'disconnect') {\n      dispatch({\n        type: WALLET_DISCONNECT_SUCCESS\n      });\n      localStorage.removeItem('user');\n    }\n  };\n};","map":{"version":3,"sources":["/Users/t/Documents/BLOCKCHAIN PROJECT/LiquidityPool-Test/front-end/src/store/action.js"],"names":["WEB3_REQUEST","WEB3_SUCCESS","WEB3_FAIL","RIGELPOOL_REQUEST","RIGELPOOL_SUCCESS","RIGELPOOL_FAIL","WALLET_CONNECT_REQUEST","WALLET_CONNECT_SUCCESS","WALLET_DISCONNECT_SUCCESS","getReadOnlyProvider","isEmpty","getRigelPoolContract","message","RigelPoolObject","setUpWeb3","obj","dispatch","type","web3","Error","payload","error","setUpRigelPool","getState","exchange","instance","setUpUser","provider","address","status","localStorage","setItem","JSON","stringify","removeItem"],"mappings":"AAAA,SAAQA,YAAR,EAAqBC,YAArB,EAAmCC,SAAnC,EAAgDC,iBAAhD,EAAkEC,iBAAlE,EAAqFC,cAArF,EACIC,sBADJ,EAC4BC,sBAD5B,EACsDC,yBADtD,QAEO,cAFP;AAGA,SAAQC,mBAAR,EAA6BC,OAA7B,EAAuCC,oBAAvC,EAA8DC,OAA9D,QAA4E,UAA5E;AAEA,OAAOC,eAAP,MAA4B,6BAA5B,C,CAKA;;AACA,OAAO,MAAMC,SAAS,GAAG,YAAc;AAAA,MAAbC,GAAa,uEAAP,EAAO;AACnC,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAG;AACDA,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEjB;AAAR,OAAD,CAAR;AACA,YAAMkB,IAAI,GAAG,MAAMT,mBAAmB,EAAtC;;AACA,UAAGC,OAAO,CAACQ,IAAD,CAAV,EAAiB;AAAE,cAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AAA6C;;AAChEH,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEhB,YAAR;AAAuBmB,QAAAA,OAAO,EAAGF;AAAjC,OAAD,CAAR;AACD,KALD,CAKC,OAAMG,KAAN,EAAY;AACXT,MAAAA,OAAO,CAAC,OAAD,EAASS,KAAK,CAACT,OAAf,CAAP;AACAI,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEf;AAAR,OAAD,CAAR;AACD;AACF,GAVD;AAWD,CAZI,C,CAeP;;AACA,OAAO,MAAMoB,cAAc,GAAG,YAAc;AAAA,MAAbP,GAAa,uEAAP,EAAO;AACxC,SAAO,OAAOC,QAAP,EAAkBO,QAAlB,KAA+B;AACpC,QAAG;AACDP,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEd;AAAR,OAAD,CAAR;AACA,YAAMqB,QAAQ,GAAG,MAAMb,oBAAoB,CAACY,QAAQ,GAAGL,IAAX,CAAgBO,QAAjB,EAA0BZ,eAA1B,CAA3C;AACAG,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEb,iBAAR;AAA2BgB,QAAAA,OAAO,EAAEI;AAApC,OAAD,CAAR;AACD,KAJD,CAIC,OAAMH,KAAN,EAAY;AACXT,MAAAA,OAAO,CAAC,OAAD,EAASS,KAAK,CAACT,OAAf,CAAP;AACAI,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEZ;AAAR,OAAD,CAAR;AACD;AACF,GATD;AAUD,CAXI,C,CAcL;;AACF,OAAO,MAAMqB,SAAS,GAAG,QAAmC;AAAA,MAAlC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAAkC;AACxD,SAAO,MAAOb,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;;AACA,QAAIuB,MAAM,KAAK,SAAf,EAA0B;AACxBC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAe;AAAEL,QAAAA;AAAF,OAAf,CAA7B;AACAZ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEV,sBADC;AAEPa,QAAAA,OAAO,EAAE;AAAEQ,UAAAA,OAAF;AAAWD,UAAAA;AAAX;AAFF,OAAD,CAAR;AAID,KAND,MAMO,IAAIE,MAAM,KAAK,YAAf,EAA6B;AAClCb,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAET;AADC,OAAD,CAAR;AAGAsB,MAAAA,YAAY,CAACI,UAAb,CAAwB,MAAxB;AACD;AACF,GAdD;AAeD,CAhBI","sourcesContent":["import {WEB3_REQUEST,WEB3_SUCCESS ,WEB3_FAIL  , RIGELPOOL_REQUEST,RIGELPOOL_SUCCESS ,RIGELPOOL_FAIL,\n    WALLET_CONNECT_REQUEST, WALLET_CONNECT_SUCCESS  , WALLET_DISCONNECT_SUCCESS,\n} from \"../constants\";\nimport {getReadOnlyProvider, isEmpty , getRigelPoolContract , message} from \"../utils\"\n\nimport RigelPoolObject from \"../contracts/RigelPool.json\";\n\n\n\n\n//set up web3\nexport const setUpWeb3 = (obj = {}) => {\n    return async (dispatch) => {\n      try{\n        dispatch({ type: WEB3_REQUEST });\n        const web3 = await getReadOnlyProvider();\n        if(isEmpty(web3)){ throw new Error(\"Please install metamask\"); }\n        dispatch({ type: WEB3_SUCCESS , payload : web3});\n      }catch(error){\n        message('error',error.message);\n        dispatch({ type: WEB3_FAIL });\n      }\n    };\n  };\n\n\n//set up rigelPool instance\nexport const setUpRigelPool = (obj = {}) => {\n    return async (dispatch , getState) => {\n      try{\n        dispatch({ type: RIGELPOOL_REQUEST});\n        const exchange = await getRigelPoolContract(getState().web3.instance,RigelPoolObject);\n        dispatch({ type: RIGELPOOL_SUCCESS, payload: exchange });\n      }catch(error){\n        message('error',error.message);\n        dispatch({ type: RIGELPOOL_FAIL });\n      }\n    };\n  };\n\n\n  //User Actions\nexport const setUpUser = ({ provider, address, status }) => {\n    return async (dispatch) => {\n      dispatch({ type: WALLET_CONNECT_REQUEST });\n      if (status === 'connect') {\n        localStorage.setItem('user', JSON.stringify({ address }));\n        dispatch({\n          type: WALLET_CONNECT_SUCCESS,\n          payload: { address, provider },\n        });\n      } else if (status === 'disconnect') {\n        dispatch({\n          type: WALLET_DISCONNECT_SUCCESS,\n        });\n        localStorage.removeItem('user');\n      }\n    };\n  };\n"]},"metadata":{},"sourceType":"module"}