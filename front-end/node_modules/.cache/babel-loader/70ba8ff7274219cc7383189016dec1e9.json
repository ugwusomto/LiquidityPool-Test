{"ast":null,"code":"import detectEthereumProvider from \"@metamask/detect-provider\";\nimport { ethers } from \"ethers\";\nimport { NETWORKS } from \"./constants\";\nimport Swal from 'sweetalert2';\nexport const isEmpty = data => {\n  return !data || data.length === 0 || typeof data == \"undefined\" || data == null || Object.keys(data) === 0;\n}; //This function connects to the blockchain and read data\n\nexport const getReadOnlyProvider = async () => {\n  const provider = await detectEthereumProvider();\n\n  if (provider && provider === window.ethereum) {\n    return new ethers.providers.Web3Provider(provider, \"any\");\n  } else {\n    return false;\n  }\n};\nexport const getRigelPoolContract = async (provider, contractData) => {\n  const network = NETWORKS[NETWORKS[\"ACTIVE\"]];\n  const networkInfo = isEmpty(contractData.networks[network.chainId]) ? contractData.networks[5777] : contractData.networks[network.chainId];\n  const address = networkInfo.address;\n  const contractABI = contractData.abi;\n  return new ethers.Contract(address, contractABI, provider);\n};\nexport function message(type, message) {\n  Swal.fire({\n    position: 'top-end',\n    icon: `${type}`,\n    title: `${message}`,\n    showConfirmButton: false,\n    timer: 4000\n  });\n}\nexport const connectWallet = async web3 => {\n  const provider = await detectEthereumProvider();\n\n  try {\n    if (provider && provider === window.ethereum && !isEmpty(web3)) {\n      await web3.send('eth_requestAccounts', []);\n      const signNer = web3.getSigner();\n      const address = await signNer.getAddress();\n      const network = await web3.getNetwork();\n\n      if (network.chainId !== NETWORKS[NETWORKS[\"ACTIVE\"]].chainId) {// requestNetworkhange(network);\n      }\n\n      return [signNer, address];\n    } else {\n      throw new Error('Please Install Metamask Wallet');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const requestNetworkhange = async network => {\n  if (network.chainId !== NETWORKS[NETWORKS[\"ACTIVE\"]].chainId) {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: NETWORKS[NETWORKS[\"ACTIVE\"]].chainIdHex\n        }]\n      });\n    } catch (error) {\n      console.log(error.message, NETWORKS[NETWORKS[\"ACTIVE\"]].chainIdHex);\n\n      if (error.code === 4902) {\n        if (\"BINANCE_TEST_NET\" === NETWORKS[\"ACTIVE\"]) {\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: '0x61',\n                chainName: 'Smart Chain - Testnet',\n                nativeCurrency: {\n                  name: 'Binance',\n                  symbol: 'BNB',\n                  // 2-6 characters long\n                  decimals: 18\n                },\n                blockExplorerUrls: ['https://testnet.bscscan.com'],\n                rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/']\n              }]\n            });\n          } catch (addError) {\n            console.error(addError);\n          }\n        } else if (\"BINANCE_MAIN_NET\" === NETWORKS[\"ACTIVE\"]) {\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: '0x38',\n                chainName: 'Smart Chain - Mainnet',\n                nativeCurrency: {\n                  name: 'Binance',\n                  symbol: 'BNB',\n                  // 2-6 characters long\n                  decimals: 18\n                },\n                blockExplorerUrls: ['https://bscscan.com'],\n                rpcUrls: ['https://bsc-dataseed.binance.org/']\n              }]\n            });\n          } catch (addError) {\n            console.error(addError);\n          }\n        } else {\n          Swal.fire({\n            position: 'top-end',\n            icon: 'info',\n            title: `Add ${NETWORKS[NETWORKS[\"ACTIVE\"]].network_name} To Your Metamask Wallet `,\n            showConfirmButton: false,\n            timer: 4000\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/t/Documents/BLOCKCHAIN PROJECT/LiquidityPool-Test/front-end/src/utils.js"],"names":["detectEthereumProvider","ethers","NETWORKS","Swal","isEmpty","data","length","Object","keys","getReadOnlyProvider","provider","window","ethereum","providers","Web3Provider","getRigelPoolContract","contractData","network","networkInfo","networks","chainId","address","contractABI","abi","Contract","message","type","fire","position","icon","title","showConfirmButton","timer","connectWallet","web3","send","signNer","getSigner","getAddress","getNetwork","Error","error","console","log","requestNetworkhange","request","method","params","chainIdHex","code","chainName","nativeCurrency","name","symbol","decimals","blockExplorerUrls","rpcUrls","addError","network_name"],"mappings":"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","sourcesContent":["import detectEthereumProvider from \"@metamask/detect-provider\";\nimport { ethers } from \"ethers\";\nimport { NETWORKS} from \"./constants\";\nimport Swal from 'sweetalert2'\n\n\nexport const isEmpty = (data) => {\n    return (\n      !data || data.length === 0 || typeof data == \"undefined\" || data == null || Object.keys(data) === 0\n    );\n  };\n\n//This function connects to the blockchain and read data\nexport const getReadOnlyProvider = async () => {\n    const provider = await detectEthereumProvider();\n    if(provider && provider === window.ethereum){\n      return new ethers.providers.Web3Provider(provider,\"any\");\n    }else{\n      return false;\n    }\n}\n\n\nexport const getRigelPoolContract = async (provider , contractData ) => {\n    const network = NETWORKS[NETWORKS[\"ACTIVE\"]];\n    const networkInfo = isEmpty(contractData.networks[network.chainId]) ? contractData.networks[5777] : contractData.networks[network.chainId];\n    const address = networkInfo.address;\n    const contractABI = contractData.abi;\n    return new ethers.Contract(address,contractABI,provider);\n}\n\n\nexport function message(type , message){\n  Swal.fire({\n      position: 'top-end',\n      icon:`${type}`,\n      title: `${message}`,\n      showConfirmButton: false,\n      timer: 4000\n  }) \n}\n\nexport const connectWallet = async (web3) => {\n  const provider = await detectEthereumProvider();\n  try {\n    if (provider && provider === window.ethereum && !isEmpty(web3)) {\n      await web3.send('eth_requestAccounts', []);\n      const signNer = web3.getSigner();\n      const address = await signNer.getAddress();\n      const network = await web3.getNetwork();\n      if(network.chainId !== NETWORKS[NETWORKS[\"ACTIVE\"]].chainId){\n        // requestNetworkhange(network);\n      }\n      return [signNer, address];\n    } else {\n      throw new Error('Please Install Metamask Wallet');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\nexport const requestNetworkhange = async (network) => {\n  if(network.chainId !== NETWORKS[NETWORKS[\"ACTIVE\"]].chainId){\n    try{\n      await window.ethereum.request({\n        method : 'wallet_switchEthereumChain',\n        params : [{chainId : NETWORKS[NETWORKS[\"ACTIVE\"]].chainIdHex}]\n      })\n    }catch(error){\n      console.log(error.message,NETWORKS[NETWORKS[\"ACTIVE\"]].chainIdHex)\n      if (error.code === 4902) {\n        if(\"BINANCE_TEST_NET\" === NETWORKS[\"ACTIVE\"]){\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [\n                {\n                  chainId: '0x61',\n                  chainName: 'Smart Chain - Testnet',\n                  nativeCurrency: {\n                    name: 'Binance',\n                    symbol: 'BNB', // 2-6 characters long\n                    decimals: 18\n                  },\n                  blockExplorerUrls: ['https://testnet.bscscan.com'],\n                  rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/'],\n                },\n              ],\n            });\n          } catch (addError) {\n            console.error(addError);\n          }\n        }else if(\"BINANCE_MAIN_NET\" === NETWORKS[\"ACTIVE\"]){\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [\n                {\n                  chainId: '0x38',\n                  chainName: 'Smart Chain - Mainnet',\n                  nativeCurrency: {\n                    name: 'Binance',\n                    symbol: 'BNB', // 2-6 characters long\n                    decimals: 18\n                  },\n                  blockExplorerUrls: ['https://bscscan.com'],\n                  rpcUrls: ['https://bsc-dataseed.binance.org/'],\n                },\n              ],\n            });\n          } catch (addError) {\n            console.error(addError);\n          }\n        }else{\n          Swal.fire({\n            position: 'top-end',\n            icon: 'info',\n            title: `Add ${NETWORKS[NETWORKS[\"ACTIVE\"]].network_name} To Your Metamask Wallet `,\n            showConfirmButton: false,\n            timer: 4000\n          }) \n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}